/* Only on wide screens do we want the float effect at all - certainly don't
   want a vertical menu to be floating as that would cover most the screen!
   
   This min width is determined by looking at about how much it needs for the
   full horizontal nav bar on my screen. */
@media screen and (min-width: 1200px) {
  /*.scrolled-down*/ .header {
    .floating-header {
      position: fixed;
      top: 0px;
      left: 0px;
      z-index: 20;

      width: 100%;
      height: 58px;

      background-color: white; /* This ensures it has a sane bg as it starts to be on top of random content. */
      border-bottom: solid 1px $plain-md; /* And just gives gives a very subtle separation that doesn't visually stand out, but does help to keep partially obscured text underneath as you scroll through a half-line look less sloppy. */
    }

    .floating-header-spacer {
      /* Since the header is fixed position,
        it doesn't normally take up space in the browser flow.
        The padding here puts a space in the document where the
        header should be so other content isn't pushed too far up. */
      /* It uses a percentage of the width for responsive height, similar
         to a video aspect ratio trick you can read about on the internet. */
      // padding-top: 10%; /* Determined by looking at the existing header which is 1200 wide and 120 tall by default */

      padding-top: 58px; /* Matches the header which now doesn't change */
    }
  }
}

.public-container {
  padding: 0px;
}

// define general plank/container sizes
.plank {
  width: 100%;

  &.under-logo {
    /* underlap the z in the image. This percentage will have to change if the image dimensions change. */
    /* The Z overlap I used here is 44 px. The image width right now is about 1160px. */
    margin-top: -2.8%; /* This is the height of the Z that we want to overlap divided by the width of this element - all size percentages are based on the element width so using this ratio and assuming both images scale at the same rate (they do because they are also max width based on the browser size), this keeps the same Z overlap too, even as the size changes. */

    /* If we're on a small screen, the bootstrap columns above will go vertical
       instead of horizontal. In that case, we no longer want to overlap - if we
       did, it would cover up the final nav menu item instead of the Z! */
    @media screen and (max-width: $screen-sm-min) {
      margin-top: 0px;
    }
  }

  .section-container {
    @extend .container;

    // set default padding around section column content
    & > section > div:not(.no-pad) {
      padding: 2.25em 0.938em 1.5em 0.938em;
    }

    & > section > div.no-pad {

      padding-left: 0px;
      padding-right: 0px;

      &:not(:first-child):not(:last-child) {
        padding: 0em;
      }
    }
  }
}

// define plank color sets
.plank {
  // set default font color to dark incase default isn't set
  color: $txt-dk;

  &.primary-lt {
    background-color: $primary-md;
    color: $txt-lt;
    a {
      color: $link-exlt;
    }

    .section-container {
      background-color: $primary-lt;
    }
  }

  &.primary-md {
    background-color: $primary-dk;
    color: $txt-lt;

    a {
      color: $link-lt;
    }
    
    .section-container {
      background-color: $primary-md;
    }
  }

  &.secondary-lt {
    background-color: $secondary-md;

    a {
      color: $link-dk;
    }
    .section-container {
      background-color: $secondary-lt;
    }
  }

  &.secondary-md {
    background-color: $secondary-dk;
    color: $txt-lt;

    a {
      color: $link-dk;
    }

    .section-container {
      background-color: $secondary-md;
    }
  }

  &.tertiary-lt {
    background-color: $tertiary-md;
    a {
      color: $link-dk;
    }

    .section-container {
      background-color: $tertiary-lt;
    }
  }

  &.tertiary-md {
    background-color: $tertiary-dk;
    color: $txt-lt;

    a {
      color: $link-dk;
    }
    
    .section-container {
      background-color: $tertiary-md;
    }
  }

  &.plain-lt {
    background-color: $plain-md;
    a {
      color: $link-dk;
    }

    .section-container {
      background-color: $plain-lt;
    }
  }

  &.plain-md {
    background-color: $plain-dk;
    a {
      color: $link-dk;
    }
    
    .section-container {
      background-color: $plain-md;
    }
  }

  &.knockout-lt {
    background-color: $knockout-md;
    color: $txt-lt;

    a {
      color: $link-dk;
    }
    
    .section-container {
      background-color: $knockout-lt;
    }
  }

  &.knockout-md {
    background-color: $knockout-dk;
    color: $txt-lt;

    a {
      color: $link-dk;
    }
    
    .section-container {
      background-color: $knockout-md;
    }
  }

  // set light/dark font overrides
  &.light {
    color: $txt-lt;
  }

  &.dark {
    color: $txt-dk;
  }

  &.light-lnk {
    a {
      color: $txt-lt;
    }
  }
}

// define standard buttons/links
.apply-button {
  display: inline-block;
  margin-top: 20px;
  border: none;

  .apply-icon {
    display: inline-block;
    height: 49px;
    width: 49px;
    vertical-align: middle;
    margin-right: 12px;
    background: url(image_path('bz_icons.svg')) 0 -1988px;

    &:hover {
      background: url(image_path('bz_icons.svg')) -58px -1988px;
    }
  }

  .apply-text {
    vertical-align: middle;
    display: inline-block;
    color: $txt-lt;
    font-weight: bold;
    font-size: 1.5em;
  }
}

.plain-md .apply-button .apply-text,
.plain-lt .apply-button .apply-text {
  color: $txt-dk;
}

.apply-button-lg {
  text-align: center;

  .apply-icon {
    display: inline-block;
    height: 90px;
    width: 90px;
    background: url(image_path('bz_icons.svg')) 0 -1889px;

    &:hover {
      background: url(image_path('bz_icons.svg')) -99px -1889px;
    }
  }

  .apply-text {
    color: $txt-lt;
    font-weight: bold;
    font-size: 2.4em;
    line-height: 1.5em;
  }
}

.page-jump {
  display: inline-block;

  .jump-icon {
    display: inline-block;
    height: 17px;
    width: 17px;
    vertical-align: middle;
    margin-right: 6px;
    background: url(image_path('bz_icons.svg')) -26px -2140px;
  }

  .jump-text {
    vertical-align: middle;
    display: inline-block;
    color: $txt-lt;
    font-weight: bold;
    font-size: 1em;
  }
}

.learn-more-link {
  display: inline-block;

  .learn-more-icon {
    display: inline-block;
    height: 25px;
    width: 25px;
    vertical-align: middle;
    margin-right: 6px;
    background: url(image_path('bz_icons.svg')) 0 -2046px;
  }

  .learn-more-text {
    vertical-align: middle;
    display: inline-block;
    //color: $cta;
    font-weight: bold;
    font-size: 1em;
  }
}

.sign-up-icon {
  display: inline-block;
  height: 25px;
  width: 25px;
  vertical-align: middle;
  margin-right: 6px;
  background: url(image_path('bz_icons.svg')) -136px -2046px;
}

.sign-up-icon-white {
  display: inline-block;
  height: 25px;
  width: 25px;
  vertical-align: middle;
  margin-right: 6px;
  background: url(image_path('bz_icons.svg')) -68px -2080px;
}



.sign-up-link {
  display: inline-block;

  .sign-up-text {
    vertical-align: middle;
    display: inline-block;
    color: $cta;
    font-weight: bold;
    font-size: 1em;
  }
}

// General header/banner
#banner {
  padding-top: 0.5em;
  padding-bottom: 0.5em;

  // Override default navbar style so it matches intended design
  .navbar {
    border: none;
    background-color: transparent;
  }

  .navbar-default .navbar-nav > li > a {
    color: $link-md;
  }

  .navbar-default .navbar-nav > li > a:hover {
    color: $link-dk;
  }
}

#banner .top-left {
  @extend .col-xs-4;
}

#banner .top-left img {
  z-index: 12; /* puts it on top of the image below */
  position: relative; /* needed for z-index to take effect */
  @media screen and (min-width: $screen-sm-max) {
    display: inline; /* On non-small screens, we want it to be left-aligned like the other text */
  }
}

#banner .navigation-holder {
  @extend .col-xs-8;
}

.top-navigation {
  font-weight: bold;
  text-align: center;

  /* As we get smaller, the logo shrinks, so we move this up a bit too
     so they stay fairly aligned */
  @media screen and (max-width: $screen-sm-min) {
    margin-top: 10px;
  }
  /* Note that smaller than this and bootstrap will change it to vertical anyway */

  /* On larger screens, where bootstrap hasn't made us vertical yet,
     we want to right align the nav so it is opposite the logo on
     the screen. When smaller, it becomes a vertical list under
     the logo. */
  @media screen and (min-width: $screen-sm-min) {
    .nav {
      float: right;
    }
  }

  li:hover {
    background-color: $plain-md;
  }
}

// setup style for main top feature of page
.main-feature {
  .section-container {
    height: 565px; /* Give room for the background to show */

    /* Allows absolute positioning in them by height percentage */
    > section, > section > div { height: 100%; }
  }

  // use when there is a video
  .intro-play-button {
    @extend .glyphicon;
    @extend .glyphicon-play-circle;

    position: absolute;
    left: 50%;
    top: 50%;
    width: 3em;
    height: 3em;
    font-size: 10em;

    @media (max-width: $screen-sm-min) {
      top: 10%;
      left: 100%;
      width: 1em;
      height: 1em;
      font-size: 5em;
    }
    
    text-align: center;
    vertical-align: middle;
    line-height: 3em;
    margin-top: -1.5em;
    margin-left: -1.5em;
    
    color: white;
     // border: solid 5px currentColor;
     // border-radius: 100%;
    cursor: pointer;

    &:hover {
      color: #BAE3FF;
    }
  }
}

// base for large icons
.large-icon {
  width: 200px;
  height: 200px;
  background-image: url(image_path('bz_icons.svg'));
  background-repeat: no-repeat;
  margin: 0px auto; /* horizontally centered in the container by default */
}


// col-img and it's friends can be used for grid columns that have images that
// need to go from being a single narrow column, to being the entire width when
// the screen is smaller. This is important because a squarish image in a column
// in high resolution doesn't make a good full-width column image in lower
// resolution. To get around this, either the col-img-left or col-img-right class
// is extended to a custom class like .my-image-column below:
// .my-image-column {
//   @extend .col-img-left;
//
//   // notice the custom image for this specific column
//   background-image: url(image_path('what_to_expect.jpg'));
//
//   // Force the height for when the column is narrow based on surrounding content
//   // When in lower resolutions the full-width column will scale to the image in the div
//   @media (min-width: $screen-lg-min) {
//     height: 430px;
//   }
// }
//
// You must also place the same image in the div container as well. It will
// automatically be hidden, but will aid the div in the scaling of the proper size.
.col-img {
  background-size: 100%;
  @media (min-width: $screen-lg-min) {
    background-size: auto;
  }

  background-repeat: no-repeat;

  img {
    visibility: hidden;
  }
}

.col-img-left {
  @extend .col-img;
  background-position: top left;
}

.col-img-right {
  @extend .col-img;
  background-position: top right;
}

button.no-decoration {
  border: none;
  background: transparent;
  font-size: inherit;
  color: inherit;
  font-weight: inherit;
}

/* Rails -> Bootstrap error connection */
.field_with_errors {
  @extend .has-error;
}

/* Bootstrap's error class applies to child elements
   and our checkboxes are done as sibling elements due
   to Rails helper interacting with our label, so this applies
   it to our labels too. */
.field_with_errors + .bs-wrapper {
  @extend .has-error;
}

#banner .nav .donate-link {
  color: $cta !important;
}

